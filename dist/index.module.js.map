{"version":3,"file":"index.module.js","sources":["../src/common/endpoints.ts","../src/types/index.ts","../src/modules/transactions/index.ts","../src/modules/index.ts"],"sourcesContent":["export const API_URL = \"https://api.momofy.com\";\nexport default {\n  transactions: {\n    makeTransaction: API_URL + \"/transactions/request\",\n    verifyTransaction: API_URL + \"/transactions/verify\",\n    listTransactions: API_URL + \"/transactions\",\n    checkout: API_URL + \"/checkouts/new\",\n  },\n};\n","type ProviderTypes = \"MTN\" | \"VODAFONE\" | \"ATM\" | \"MPESA\";\n\ntype ChannelTypes = \"mobile_money\";\n\ntype Customer = {\n  name: String;\n  email: String;\n  phone_number: String;\n};\n\nexport type RequestPaymentType = {\n  provider: ProviderTypes;\n  transaction_note: String;\n  channel: ChannelTypes;\n  currency: String;\n  amount: string | number;\n  reference_code: String;\n  customer: Customer;\n};\n\nexport enum EnvironmentType {\n  PRODUCTION = \"production\",\n  TEST = \"test\",\n}\n\n\nexport interface SuccessRequest {\n  success: boolean;\n  message: string;\n  result: any;\n  meta: any;\n  status_code: number;\n}\n\nexport interface BadRequest {\n    status_code: number;\n    message: string;\n  }","import { Axios } from \"axios\";\nimport { BadRequest, RequestPaymentType, SuccessRequest } from \"../../types\";\nimport endpoints from \"../../common/endpoints\";\n\nexport class Transaction {\n  private http: Axios;\n  constructor(http: Axios) {\n    this.http = http;\n  }\n\n  /**\n   * requestPayment\n   * @param body\n   */\n  public async requestPayment(\n    body: RequestPaymentType\n  ): Promise<SuccessRequest> {\n    return this.http.post(\n      endpoints.transactions.makeTransaction,\n      JSON.stringify(body)\n    );\n  }\n\n  /**\n   * Transaction Reference ID\n   * @param transactionId\n   */\n  public async verify(transactionId: string): Promise<SuccessRequest> {\n    return this.http.get(\n      endpoints.transactions.verifyTransaction + \"/\" + transactionId\n    );\n  }\n\n  /**\n   *  Request checkout URL\n   *\n   * @param {Object} requestBody information required to make request to checkout API\n   * @param {string} requestBody.transactionNote transaction note\n   * @param {string | number} requestBody.amount amount to request from customer\n   * @param {string} requestBody.referenceCode reference code (optional)\n   * @param {string} requestBody.redirectUrl redirect url\n   *\n   */\n  public checkout(requestBody: {\n    transactionNote: string;\n    amount: number;\n    referenceCode: string;\n    redirectUrl: string;\n  }): Promise<SuccessRequest> {\n    let body = {\n      amount: requestBody.amount,\n      transaction_note: requestBody.transactionNote,\n      redirect_url: requestBody.redirectUrl,\n      reference_code: requestBody.referenceCode,\n    };\n    return this.http.post(\n      endpoints.transactions.checkout,\n      JSON.stringify(body)\n    );\n  }\n}\n","import { API_URL } from \"../common/endpoints\";\nimport { EnvironmentType } from \"../types\";\nimport { Axios } from \"axios\";\nimport { Transaction } from \"./transactions\";\n\nexport class Momofy {\n  private readonly http: Axios;\n  public transaction: Transaction;\n\n  /**\n   * API secrete key\n   * @param apiKey\n   */\n  constructor(private readonly apiKey: string) {\n    this.http = new Axios({\n      baseURL: API_URL,\n      headers: {\n        Authorization: `Bearer ${this.apiKey}`,\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    this.http.interceptors.response.use(\n      (response) => (response.data = JSON.parse(response.data))\n    );\n\n    this.transaction = new Transaction(this.http);\n  }\n}\n"],"names":["EnvironmentType","API_URL","transactions","makeTransaction","verifyTransaction","listTransactions","checkout","Transaction","http","this","_proto","prototype","requestPayment","body","Promise","resolve","post","endpoints","JSON","stringify","e","reject","verify","transactionId","get","requestBody","amount","transaction_note","transactionNote","redirect_url","redirectUrl","reference_code","referenceCode","Momofy","apiKey","transaction","Axios","baseURL","headers","Authorization","interceptors","response","use","data","parse"],"mappings":"8BAAa,ICoBDA,EDpBCC,EAAU,2BACR,CACbC,aAAc,CACZC,gBAAiBF,EAAU,wBAC3BG,kBAAmBH,EAAU,uBAC7BI,iBAAkBJ,EAAU,gBAC5BK,SAAUL,EAAU,mBEFXM,eAAW,WAEtB,SAAAA,EAAYC,GADJA,KAAAA,YAENC,KAAKD,KAAOA,CACd,CAAC,IAAAE,EAAAH,EAAAI,iBAAAD,EAMYE,wBACXC,OAEA,OAAAC,QAAAC,QAAON,KAAKD,KAAKQ,KACfC,EAAUf,aAAaC,gBACvBe,KAAKC,UAAUN,IAEnB,CAAC,MAAAO,UAAAN,QAAAO,OAAAD,KAAAV,EAMYY,OAAMA,SAACC,GAAqB,IACvC,OAAAT,QAAAC,QAAON,KAAKD,KAAKgB,IACfP,EAAUf,aAAaE,kBAAoB,IAAMmB,GAErD,CAAC,MAAAH,GAAAN,OAAAA,QAAAO,OAAAD,EAAAV,CAAAA,EAAAA,EAYMJ,SAAA,SAASmB,GAYd,OAAWhB,KAACD,KAAKQ,KACfC,EAAUf,aAAaI,SACvBY,KAAKC,UARI,CACTO,OAAQD,EAAYC,OACpBC,iBAAkBF,EAAYG,gBAC9BC,aAAcJ,EAAYK,YAC1BC,eAAgBN,EAAYO,gBAMhC,EAACzB,CAAA,CAvDqB,GCCX0B,EAQX,SAA6BC,GAAczB,KAAdyB,YAAA,EAAAzB,KAPZD,UACV2B,EAAAA,KAAAA,mBAMsB1B,KAAMyB,OAANA,EAC3BzB,KAAKD,KAAO,IAAI4B,EAAM,CACpBC,QAASpC,EACTqC,QAAS,CACPC,wBAAyB9B,KAAKyB,OAC9B,eAAgB,sBAIpBzB,KAAKD,KAAKgC,aAAaC,SAASC,IAC9B,SAACD,GAAQ,OAAMA,EAASE,KAAOzB,KAAK0B,MAAMH,EAASE,KAAK,GAG1DlC,KAAK0B,YAAc,IAAI5B,EAAYE,KAAKD,KAC1C,GFPF,SAAYR,GACVA,EAAA,WAAA,aACAA,EAAA,KAAA,MACD,CAHD,CAAYA,IAAAA,EAGX,CAAA"}